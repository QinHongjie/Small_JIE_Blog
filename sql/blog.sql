-- MySQL dump 10.13  Distrib 5.6.50, for Linux (x86_64)
--
-- Host: localhost    Database: blog
-- ------------------------------------------------------
-- Server version	5.6.50-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `hibernate_sequence`
--

DROP TABLE IF EXISTS `hibernate_sequence`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hibernate_sequence` (
  `next_val` bigint(20) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `hibernate_sequence`
--

LOCK TABLES `hibernate_sequence` WRITE;
/*!40000 ALTER TABLE `hibernate_sequence` DISABLE KEYS */;
INSERT INTO `hibernate_sequence` VALUES (58);
/*!40000 ALTER TABLE `hibernate_sequence` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_blog`
--

DROP TABLE IF EXISTS `t_blog`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_blog` (
  `id` bigint(20) NOT NULL,
  `appreciation` bit(1) NOT NULL,
  `commentabled` bit(1) NOT NULL,
  `content` longtext,
  `create_time` datetime(6) DEFAULT NULL,
  `first_picture` varchar(255) DEFAULT NULL,
  `flag` varchar(255) DEFAULT NULL,
  `published` bit(1) NOT NULL,
  `recommend` bit(1) NOT NULL,
  `share_statement` bit(1) NOT NULL,
  `title` varchar(255) DEFAULT NULL,
  `update_time` datetime(6) DEFAULT NULL,
  `views` int(11) DEFAULT NULL,
  `type_id` bigint(20) DEFAULT NULL,
  `user_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `FK292449gwg5yf7ocdlmswv9w4j` (`type_id`) USING BTREE,
  KEY `FK8ky5rrsxh01nkhctmo7d48p82` (`user_id`) USING BTREE,
  CONSTRAINT `FK292449gwg5yf7ocdlmswv9w4j` FOREIGN KEY (`type_id`) REFERENCES `t_type` (`id`),
  CONSTRAINT `FK8ky5rrsxh01nkhctmo7d48p82` FOREIGN KEY (`user_id`) REFERENCES `t_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_blog`
--

LOCK TABLES `t_blog` WRITE;
/*!40000 ALTER TABLE `t_blog` DISABLE KEYS */;
INSERT INTO `t_blog` VALUES (21,0x01,0x01,'### 1.url: \r\n要求为String类型的参数，（默认为当前页地址）发送请求的地址。\r\n### 2.type: \r\n要求为String类型的参数，请求方式（post或get）默认为get。注意其他http请求方法，例如put和delete也可以使用，但仅部分浏览器支持。\r\n### 3.timeout: \r\n要求为Number类型的参数，设置请求超时时间（毫秒）。此设置将覆盖$.ajaxSetup()方法的全局设置。\r\n### 4.async: \r\n要求为Boolean类型的参数，默认设置为true，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为false。注意，同步请求将锁住浏览器，用户其他操作必须等待请求完成才可以执行。\r\n### 5.cache: \r\n要求为Boolean类型的参数，默认为true（当dataType为script时，默认为false），设置为false将不会从浏览器缓存中加载请求信息。\r\n### 6.data: \r\n要求为Object或String类型的参数，发送到服务器的数据。如果已经不是字符串，将自动转换为字符串格式。get请求中将附加在url后。防止这种自动转换，可以查看　　processData选项。对象必须为key/value格式，例如{foo1:\"bar1\",foo2:\"bar2\"}转换为&foo1=bar1&foo2=bar2。如果是数组，JQuery将自动为不同值对应同一个名称。例如{foo:[\"bar1\",\"bar2\"]}转换为&foo=bar1&foo=bar2。\r\n### 7.dataType: \r\n要求为String类型的参数，预期服务器返回的数据类型。如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。可用的类型如下：\r\nxml：返回XML文档，可用JQuery处理。\r\nhtml：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。\r\nscript：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。\r\njson：返回JSON数据。\r\njsonp：JSONP格式。使用SONP形式调用函数时，例如myurl?callback=?，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数。\r\ntext：返回纯文本字符串。\r\n### 8.beforeSend：\r\n要求为Function类型的参数，发送请求前可以修改XMLHttpRequest对象的函数，例如添加自定义HTTP头。在beforeSend中如果返回false可以取消本次ajax请求。XMLHttpRequest对象是惟一的参数。\r\n            function(XMLHttpRequest){\r\n               this;   //调用本次ajax请求时传递的options参数\r\n            }\r\n### 9.complete：\r\n要求为Function类型的参数，请求完成后调用的回调函数（请求成功或失败时均调用）。参数：XMLHttpRequest对象和一个描述成功请求类型的字符串。\r\n          function(XMLHttpRequest, textStatus){\r\n             this;    //调用本次ajax请求时传递的options参数\r\n          }\r\n### 10.success：\r\n要求为Function类型的参数，请求成功后调用的回调函数，有两个参数。\r\n         (1)由服务器返回，并根据dataType参数进行处理后的数据。\r\n         (2)描述状态的字符串。\r\n         function(data, textStatus){\r\n            //data可能是xmlDoc、jsonObj、html、text等等\r\n            this;  //调用本次ajax请求时传递的options参数\r\n         }\r\n### 11.error:\r\n要求为Function类型的参数，请求失败时被调用的函数。该函数有3个参数，即XMLHttpRequest对象、错误信息、捕获的错误对象(可选)。ajax事件函数如下：\r\n       function(XMLHttpRequest, textStatus, errorThrown){\r\n          //通常情况下textStatus和errorThrown只有其中一个包含信息\r\n          this;   //调用本次ajax请求时传递的options参数\r\n       }\r\n### 12.contentType：\r\n要求为String类型的参数，当发送信息至服务器时，内容编码类型默认为\"application/x-www-form-urlencoded\"。该默认值适合大多数应用场合。\r\n13.dataFilter：\r\n要求为Function类型的参数，给Ajax返回的原始数据进行预处理的函数。提供data和type两个参数。data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理。\r\n            function(data, type){\r\n                //返回处理后的数据\r\n                return data;\r\n            }\r\n### 14.dataFilter：\r\n要求为Function类型的参数，给Ajax返回的原始数据进行预处理的函数。提供data和type两个参数。data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理。\r\n            function(data, type){\r\n                //返回处理后的数据\r\n                return data;\r\n            }\r\n### 15.global：\r\n要求为Boolean类型的参数，默认为true。表示是否触发全局ajax事件。设置为false将不会触发全局ajax事件，ajaxStart或ajaxStop可用于控制各种ajax事件。\r\n### 16.ifModified：\r\n要求为Boolean类型的参数，默认为false。仅在服务器数据改变时获取新数据。服务器数据改变判断的依据是Last-Modified头信息。默认值是false，即忽略头信息。\r\n### 17.jsonp：\r\n要求为String类型的参数，在一个jsonp请求中重写回调函数的名字。该值用来替代在\"callback=?\"这种GET或POST请求中URL参数里的\"callback\"部分，例如{jsonp:\'onJsonPLoad\'}会导致将\"onJsonPLoad=?\"传给服务器。\r\n### 18.username：\r\n要求为String类型的参数，用于响应HTTP访问认证请求的用户名。\r\n### 19.password：\r\n要求为String类型的参数，用于响应HTTP访问认证请求的密码。\r\n### 20.processData：\r\n要求为Boolean类型的参数，默认为true。默认情况下，发送的数据将被转换为对象（从技术角度来讲并非字符串）以配合默认内容类型\"application/x-www-form-urlencoded\"。如果要发送DOM树信息或者其他不希望转换的信息，请设置为false。\r\n### 21.scriptCharset：\r\n要求为String类型的参数，只有当请求时dataType为\"jsonp\"或者\"script\"，并且type是GET时才会用于强制修改字符集(charset)。通常在本地和远程的内容编码不同时使用\r\n\r\n代码实例：\r\n```javascript\r\n$(function(){\r\n    $(\'#send\').click(function(){\r\n         $.ajax({\r\n             type: \"GET\",\r\n             url: \"test.json\",\r\n             data: {username:$(\"#username\").val(), content:$(\"#content\").val()},\r\n             dataType: \"json\",\r\n             success: function(data){\r\n                         $(\'#resText\').empty();   //清空resText里面的所有内容\r\n                         var html = \'\'; \r\n                         $.each(data, function(commentIndex, comment){\r\n                               html += \'<div class=\"comment\"><h6>\' + comment[\'username\']\r\n                                         + \':</h6><p class=\"para\"\' + comment[\'content\']\r\n                                         + \'</p></div>\';\r\n                         });\r\n                         $(\'#resText\').html(html);\r\n                      }\r\n         });\r\n    });\r\n});\r\n```\r\n','2021-03-26 10:53:40.671000','https://unsplash.it/800/450?image=119','原创',0x01,0x01,0x01,'$.ajax()方法详解','2021-03-26 10:53:40.671000',61,7,1),(22,0x01,0x01,'### 1. getRequestDispatcher().forward()\r\n是在服务器端起作用,当使用forward()时,Servlet engine传递HTTP请求从当前的Servlet or JSP到另外一个Servlet,JSP 或普通HTML文件,也即你的form提交至a.jsp,在a.jsp用到了forward()重定向至b.jsp,此时form提交的所有信息在 b.jsp都可以获得,参数自动传递. 但forward()无法重定向至有frame的jsp文件,可以重定向至有frame的html文件,同时forward()无法在后面带参数传递,比如servlet?name=frank,这样不行,可以程序内通过response.setAttribute(\"name\",name)来传至下一个页面。\r\n重定向后浏览器地址栏URL不变。\r\n例：在servlet中进行重定向\r\n```java\r\npublic void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException,IOException\r\n{\r\n　 response.setContentType(\"text/html; charset=gb2312\");\r\n　 ServletContext sc = getServletContext();\r\n　 RequestDispatcher rd = null;\r\n　 rd = sc.getRequestDispatcher(\"/index.jsp\"); //定向的页面\r\n　 rd.forward(request, response);\r\n}\r\n```\r\n通常在servlet中使用，不在jsp中使用。\r\n\r\n### 2. response.sendRedirect()\r\n是在用户的浏览器端工作,sendRedirect()可以带参数传递,比如servlet?name=frank传至下个页面,同时它可以重定向至不同的主机上,sendRedirect()可以重定向有frame.的jsp文件.\r\n重定向后在浏览器地址栏上会出现重定向页面的URL\r\n例：在servlet中重定向\r\n```java\r\npublic void doPost(HttpServletRequest request,HttpServletResponse response)throws ServletException,IOException{\r\n	response.setContentType(\"text/html; charset=gb2312\");\r\n	response.sendRedirect(\"/index.jsp\");\r\n}\r\n```\r\n\r\n由于response是jsp页面中的隐含对象，故在jsp页面中可以用response.sendRedirect()直接实现重定位。\r\n注意：\r\n#### (1) 使用response.sendRedirect时，前面不能有HTML输出；\r\n这并不是绝对的，不能有HTML输出其实是指不能有HTML被送到了浏览器。事实上现在的server都有cache机制，一般在8K（我是说 JSP　SERVER），这就意味着，除非你关闭了cache，或者你使用了out.flush()强制刷新，那么在使用sendRedirect之前，有少量的HTML输出也是允许的。\r\n#### (2) response.sendRedirect之后，应该紧跟一句return。\r\n我们已经知道response.sendRedirect是通过浏览器来做转向的，所以只有在页面处理完成后，才会有实际的动作。既然你已经要做转向了，那么后的输出还有什么意义呢？而且有可能会因为后面的输出导致转向失败。\r\n#### 比较：\r\n(1) Dispatcher.forward()是容器中控制权的转向，在客户端浏览器地址栏中不会显示出转向后的地址；\r\n(2) response.sendRedirect()则是完全的跳转，浏览器将会得到跳转的地址，并重新发送请求链接。这样，从浏览器的地址栏中可以看到跳转后的链接地址。\r\n前者更加高效，在前者可以满足需要时，尽量使用RequestDispatcher.forward()方法。\r\n注：在有些情况下，比如，需要跳转到一个其它服务器上的资源，则必须使用HttpServletResponse.sendRequest()方法。\r\n\r\n### 3. ＜jsp:forward page=\"\" /＞\r\n它的底层部分是由RequestDispatcher来实现的，因此它带有RequestDispatcher.forward()方法的印记。\r\n如果在之前有很多输出,前面的输出已使缓冲区满,将自动输出到客户端,那么该语句将不起作用,这一点应该特别注意。\r\n另外要注意：它不能改变浏览器地址，刷新的话会导致重复提交\r\n\r\n### 4. 修改HTTP header的Location属性来重定向\r\n通过设置直接修改地址栏来实现页面的重定向。\r\njsp文件代码如下：\r\n```java\r\n＜%response.setStatus(HttpServletResponse.SC_MOVED_PERMANENTLY);  String newLocn = \"/newpath/jsa.jsp\";  response.setHeader(\"Location\",newLocn);%＞\r\n```\r\n\r\n### 5. JSP中实现在某页面停留若干秒后,自动重定向到另一页面\r\n在html文件中，下面的代码：\r\n```html\r\n＜meta http-equiv=\"refresh\" content=\"300; url=target.jsp\"＞\r\n```\r\n它的含义：在5分钟之后正在浏览的页面将会自动变为target.html这一页。代码中300为刷新的延迟时间，以秒为单位。targer.html为你想转向的目标页,若为本页则为自动刷新本页。\r\n由上可知，可以通过setHeader来实现某页面停留若干秒后,自动重定向到另一页面。\r\n关键代码：\r\nString content=stayTime+\";URL=\"+URL;response.setHeader(\"REFRESH\",content);','2021-03-26 10:53:40.671000','https://unsplash.it/800/450?image=119','转载',0x01,0x01,0x01,'javaweb中五种转发(重定向)方式','2021-03-28 06:26:51.527000',118,4,1),(23,0x01,0x01,'# 静态资源\r\n## 1.通过webjars\r\n> *映射路径：pathPattern：\"/webjars/**\"\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>org.webjars</groupId>\r\n    <artifactId>jquery</artifactId>\r\n    <version>3.5.1</version>\r\n</dependency>\r\n```\r\n\r\n## 2.静态资源扫描文件\r\n> *映射路径：pathPattern：\"/**\"\r\n- classpath:/META-INF/resources/\r\n- classpath:/resources/\r\n- classpath:/static/（默认）\r\n- classpath:/public/\r\n\r\n# 模板引擎thymeleaf\r\n## maven依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-thymeleaf</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```\r\n\r\n## 扫描地址：\r\nclasspath：/templates/**		*文件后缀只能为.html\r\n## 映射地址：\r\n/**','2021-03-26 10:53:40.671000','https://unsplash.it/800/450?image=0','原创',0x01,0x01,0x01,'springboot-web开发','2021-03-27 10:08:47.572000',132,4,1),(42,0x01,0x01,'> &diams; 号标注为常用！\r\n\r\n------------\r\n\r\n### ls（列出目录）\r\n- **-a** ：全部的文件，连同隐藏档(开头为 . 的文件)。&diams;\r\n- **-d** ：仅列出目录本身，而不是列出目录内的文件数据。&diams;\r\n- **-l** ：长数据串列出，包含文件的属性与权限等等数据。&diams;\r\n\r\n### cd（切换目录）&diams;\r\n- **~** ：表示回到自己的家目录，亦即是 /root 这个目录。\r\n- **..** ：表示去到目前的上一级目录。\r\n\r\n### pwd（显示目前所在的目录）\r\n- **[-P]**：显示出确实的路径，而非使用连接(link)路径；\r\n- 不以连接档的数据显示，而是显示正确的完整路径。\r\n\r\n### mkdir [-mp] 目录名称。（创建新目录）\r\n- **-m** ：配置文件的权限。\r\n- **-p** ：帮助你直接将所需要的目录(包含上一级目录)递回创建起来(创建多层目录)。\r\n\r\n### rmdir [-p] 目录名称。（删除空的目录）\r\n- **-p** ：连同上一级【空的】目录也一起删除。\r\n- **rm** : 命令删除非空目录 ! ! !\r\n\r\n### cp [-adfilprsu] 来源档 目标档。（复制文件或目录）\r\n- **-a** ：相当于-pdr的意思；&diams;\r\n- **-d** ：若来源档为连接档的属性(link file),则复制连接档属性而非文件本身；\r\n- **-f** ：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后在尝试一次；\r\n- **-i** ：若目标档(destination)已经存在时，在覆盖时先询问动作的进行；&diams;\r\n- **-l** ：进行硬式连接(head link)的连接档创建，而非复制文件本身；\r\n- **-p** ：连同文件的属性一起复制过去，而非使用默认属性；\r\n- **-r** ：递回持续复制，用于目录的复制行为；&diams;\r\n- **-s** ：复制成为符号连接档(symbolic link)，亦即【捷径】文件；\r\n- **-u** ：若 destination 比 source 旧才升级 destination ！\r\n\r\n### rm [-fir] 文件或目录。（移除文件或目录）\r\n- **-f** ：就是force的意思，忽略不存在的文件，不会出警告信息；\r\n- **-i** ：互动模式，在删除前会询问使用者是否动作；\r\n- **-r** ：递回删除，最常用在目录的删除，这是非常危险的选项！\r\n\r\n### mv [-fiu] source destination.（移动文件与目录，或修改名称）\r\n- **-f** ：force强制的意思，如果目标文件已经存在，不会询问儿直接覆盖；\r\n- **-i** ：若目标文件(destination)已经存在时，就会询问是否覆盖；\r\n- **-u** ：若目标文件已经存在，且 source 比较新，才会升级(update)。','2021-03-28 17:17:36.216000','https://unsplash.it/800/450?image=1003','原创',0x01,0x01,0x01,'Linux文件目录管理命令','2021-03-28 17:28:55.726000',96,40,1),(45,0x01,0x01,'## 一、定义接口返回code。\r\n> 在utils包下创建接口类**ResultCode**：\r\n\r\n```java\r\npublic interface ResultCode {\r\n\r\n	int SC_OK = 200;\r\n\r\n	int SC_NOT_FOUND = 404;\r\n\r\n	int SC_INTERNAL_SERVER_ERROR = 500;\r\n\r\n	/**\r\n	* 数据绑定错误\r\n	*/\r\n	int SC_PARAMETER_ERROR = 600;\r\n\r\n	/**\r\n	* 业务错误\r\n	*/\r\n	int SC_SERVICE_ERROR = 601;\r\n\r\n	int SC_THROW_ERROR = 602;\r\n\r\n	int SC_NO_LOGIN = 603;\r\n\r\n	int SC_FORM_ERROR = 604;\r\n}\r\n```\r\n## 二、编写返回接口封装类Result：\r\n> 在utils包下创建**Result**类:\r\n\r\n### 1、lombok方式实现：\r\nmaven引入lombok依赖：\r\n```xml\r\n<dependency>\r\n	<groupId>org.projectlombok</groupId>\r\n	<artifactId>lombok</artifactId>\r\n	<version>1.18.12</version>\r\n</dependency>\r\n```\r\n代码实现：\r\n```java\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Builder;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n \r\n@Data\r\n@Builder\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\npublic class Result {\r\n \r\n    private static final String DEFAULT_SUCCESS_MESSAGE = \"SUCCESS\";\r\n \r\n    private int code;\r\n    private String message;\r\n    private Object data;\r\n \r\n    public static Result success() {\r\n \r\n        return Result.builder().code(ResultCode.SC_OK).message(DEFAULT_SUCCESS_MESSAGE).build();\r\n    }\r\n \r\n    public static Result success(Object data) {\r\n        return Result.builder().code(ResultCode.SC_OK).message(DEFAULT_SUCCESS_MESSAGE).data(data).build();\r\n    }\r\n \r\n    public static Result fail(String message) {\r\n        return Result.builder().code(ResultCode.SC_SERVICE_ERROR).message(message).build();\r\n    }\r\n \r\n    public static Result exception(String message) {\r\n        return Result.builder().code(ResultCode.SC_THROW_ERROR).message(message).build();\r\n    }\r\n \r\n}\r\n\r\n```\r\n**解读：**\r\n> lombok项目是一个Java库，它会自动插入编辑器和构建工具中，Lombok提供了一组有用的注释，用来消除Java类中的大量样板代码。\r\n\r\n如：**@Data**会自动创建get和set等方法；**@NoArgsConstructor**：创建空构造器；**@AllArgsConstructor**：创建所有属性构造器；**@Builder**：表示进行Builder方式初始化。\r\n### 2、源码实现（将以上类编译）：\r\n```java\r\npublic class Result {\r\n    private static final String DEFAULT_SUCCESS_MESSAGE = \"SUCCESS\";\r\n    private int code;\r\n    private String message;\r\n    private Object data;\r\n\r\n    public Result() {\r\n    }\r\n    public Result(int code, String message, Object data) {\r\n        this.code = code;\r\n        this.message = message;\r\n        this.data = data;\r\n    }\r\n\r\n    public int getCode() {\r\n        return code;\r\n    }\r\n\r\n    public void setCode(int code) {\r\n        this.code = code;\r\n    }\r\n\r\n    public String getMessage() {\r\n        return message;\r\n    }\r\n\r\n    public void setMessage(String message) {\r\n        this.message = message;\r\n    }\r\n\r\n    public Object getData() {\r\n        return data;\r\n    }\r\n\r\n    public void setData(Object data) {\r\n        this.data = data;\r\n    }\r\n\r\n    public static Result success() {\r\n\r\n        return Result.builder().code(ResultCode.SC_OK).message(DEFAULT_SUCCESS_MESSAGE).build();\r\n    }\r\n\r\n    public static Result success(Object data) {\r\n        return Result.builder().code(ResultCode.SC_OK).message(DEFAULT_SUCCESS_MESSAGE).data(data).build();\r\n    }\r\n\r\n    public static Result fail(String message) {\r\n        return Result.builder().code(ResultCode.SC_SERVICE_ERROR).message(message).build();\r\n    }\r\n\r\n    public static Result exception(String message) {\r\n        return Result.builder().code(ResultCode.SC_THROW_ERROR).message(message).build();\r\n    }\r\n    \r\n    public static Result.ResultBuilder builder() {\r\n        return new Result.ResultBuilder();\r\n    }\r\n\r\n    public static class ResultBuilder {\r\n        private int code;\r\n        private String message;\r\n        private Object data;\r\n        ResultBuilder() {}\r\n\r\n        public Result.ResultBuilder code(int code) {\r\n            this.code = code;\r\n            return this;\r\n        }\r\n        public Result.ResultBuilder message(String message) {\r\n            this.message = message;\r\n            return this;\r\n        }\r\n        public Result.ResultBuilder data(Object data) {\r\n            this.data = data;\r\n            return this;\r\n        }\r\n        public Result build() {\r\n            return new Result(this.code, this.message, this.data);\r\n        }\r\n        public String toString() {\r\n            return \"Result.ResultBuilder(code=\" + this.code + \", message=\" + this.message + \", data=\" + this.data +\")\";\r\n        }\r\n    }\r\n}\r\n```\r\n## 三、创建接口controller，接口请求的url\r\n```java\r\npackage com.qhj.api;\r\n\r\nimport com.qhj.pojo.Type;\r\nimport com.qhj.service.TypeService;\r\nimport com.qhj.utils.code.Result;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.ResponseBody;\r\n\r\nimport java.util.List;\r\n\r\n@Controller\r\n@RequestMapping(\"/api\")\r\npublic class ApiController {\r\n\r\n    @Autowired\r\n    private TypeService typeService;\r\n\r\n    @RequestMapping(\"/getTypeList\")\r\n    @ResponseBody\r\n    public Result getTypeList(){\r\n        List<Type> typeList = typeService.listType();\r\n        return Result.success(typeList);\r\n    }\r\n}\r\n```\r\n**解读：**<br>\r\n这里以我的项目为例，TypeService中实现了获取所有type(分类[id,name,blogCount(博文数)])的方法；<br>\r\n@ResponseBody：作用是将controller的方法返回的对象通过适当的转换器转换为指定的格式之后，写入到response对象的body区，这里用来返回JSON数据。\r\n## 四、浏览器访问：\r\n**url：项目名+/api/getTypeList**<br>\r\n返回结果：\r\n> {\"code\":200,\"message\":\"SUCCESS\",\"data\":[{\"name\":\"点滴生活\",\"id\":\"2\",\"blogsCount\":\"0\"},{\"name\":\"学习日志\",\"id\":\"4\",\"blogsCount\":\"2\"},{\"name\":\"数据库\",\"id\":\"6\",\"blogsCount\":\"0\"},{\"name\":\"前端技术\",\"id\":\"7\",\"blogsCount\":\"1\"},{\"name\":\"关于本站\",\"id\":\"35\",\"blogsCount\":\"0\"}]}','2021-03-29 06:00:35.138000','https://unsplash.it/800/450?image=171','原创',0x01,0x01,0x01,'java接口实例','2021-03-29 06:20:38.917000',115,4,1),(46,0x01,0x01,'# 一、编辑器 Markdown \r\n## 1、markdown相关链接：\r\n> - 富文本编辑文档及下载地址：[https://github.com/Run2948/editor.md](https://github.com/Run2948/editor.md \"https://github.com/Run2948/editor.md\")\r\n> - 内容转HTML使用教程及相关依赖：[https://github.com/commonmark/commonmark-java](https://github.com/commonmark/commonmark-java \"https://github.com/commonmark/commonmark-java\")\r\n\r\n## 2、markdown&Maven依赖：\r\n```xml\r\n<!-- MarckDown -->\r\n<dependency>\r\n    <groupId>org.commonmark</groupId>\r\n    <artifactId>commonmark</artifactId>\r\n    <version>0.17.1</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.commonmark</groupId>\r\n    <artifactId>commonmark-ext-gfm-tables</artifactId>\r\n    <version>0.17.1</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.commonmark</groupId>\r\n    <artifactId>commonmark-ext-heading-anchor</artifactId>\r\n    <version>0.17.1</version>\r\n</dependency>\r\n```\r\n## 3、Markdown内容转HTML工具类：\r\n```java\r\nimport org.commonmark.Extension;\r\nimport org.commonmark.ext.gfm.tables.TableBlock;\r\nimport org.commonmark.ext.gfm.tables.TablesExtension;\r\nimport org.commonmark.ext.heading.anchor.HeadingAnchorExtension;\r\nimport org.commonmark.node.Image;\r\nimport org.commonmark.node.Node;\r\nimport org.commonmark.parser.Parser;\r\nimport org.commonmark.renderer.html.AttributeProvider;\r\nimport org.commonmark.renderer.html.AttributeProviderContext;\r\nimport org.commonmark.renderer.html.AttributeProviderFactory;\r\nimport org.commonmark.renderer.html.HtmlRenderer;\r\nimport java.util.*;\r\n/**\r\n * Created by QHJ on 2021/3/27\r\n */\r\npublic class MarkdownUtils {\r\n    /**\r\n     * markdown格式转换成HTML格式\r\n     * @param markdown\r\n     * @return\r\n     */\r\n    public static String markdownToHtml(String markdown) {\r\n        Parser parser = Parser.builder().build();\r\n        Node document = parser.parse(markdown);\r\n        HtmlRenderer renderer = HtmlRenderer.builder().build();\r\n        return renderer.render(document);\r\n    }\r\n    /**\r\n     * 增加扩展【标题锚点，表格生成】\r\n     * Markdown转换成HTML\r\n     * @param markdown\r\n     * @return\r\n     */\r\n    public static String markdownToHtmlExtensions(String markdown) {\r\n        // H标题生成id\r\n        Set<Extension> headingAnchorExtensions = Collections.singleton(HeadingAnchorExtension.create());\r\n        // 转换table的HTML\r\n        List<Extension> tableExtension = Arrays.asList(TablesExtension.create());\r\n        Parser parser = Parser.builder()\r\n                .extensions(tableExtension)\r\n                .build();\r\n        Node document = parser.parse(markdown);\r\n        HtmlRenderer renderer = HtmlRenderer.builder()\r\n                .extensions(headingAnchorExtensions)\r\n                .extensions(tableExtension)\r\n                .attributeProviderFactory(new AttributeProviderFactory() {\r\n                    public AttributeProvider create(AttributeProviderContext context) {\r\n                        return new CustomAttributeProvider();\r\n                    }\r\n                })\r\n                .build();\r\n        return renderer.render(document);\r\n    }\r\n    /**\r\n     * 为标签添加class及基本属性\r\n     */\r\n    private static class CustomAttributeProvider implements AttributeProvider {\r\n        @Override\r\n        public void setAttributes(Node node, String tagName, Map<String, String> attributes) {\r\n            // 改变a标签的target属性为_blank\r\n            if (node instanceof Image) {\r\n                attributes.put(\"target\", \"_blank\");\r\n            }\r\n            if (node instanceof TableBlock) {\r\n                attributes.put(\"class\", \"ui celled table\");\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n# 二、内容排版 typo.css\r\n> **下载地址**： [github.com/sofish/typo.css](http://github.com/sofish/typo.css \"github.com/sofish/typo.css\")\r\n\r\n# 三、动画 animate.css\r\n> **参考地址：**\r\n> -  [https://www.dowebok.com/demo/2014/98/ ](https://www.dowebok.com/demo/2014/98/  \"https://www.dowebok.com/demo/2014/98/ \")\r\n> -  [animate.style](http://animate.style/ \"animate.style\")\r\n\r\n# 四、代码高亮 prism \r\n> - **下载地址**：[github.com/PrismJS/prism ](http://github.com/PrismJS/prism  \"github.com/PrismJS/prism \")\r\n> - **官网**：[prismjs.com](http://prismjs.com/ \"prismjs.com\")\r\n\r\n# 五、滚动侦测 waypoints \r\n> **官网地址**：[http://imakewebthings.com/waypoints/](http://imakewebthings.com/waypoints/ \"http://imakewebthings.com/waypoints/\")\r\n\r\n# 六、平滑滚动 jquery.scrollTo \r\n> **下载地址**：[github.com/flesler/jquery.scrollTo](http://github.com/flesler/jquery.scrollTo \"github.com/flesler/jquery.scrollTo\")\r\n\r\n**CDN引用：**\r\n```html\r\n<script src=\"https://cdn.jsdelivr.net/npm/jquery.scrollto@2.1.3/jquery.scrollTo.min.js\"></script>\r\n```\r\n# 七、目录生成 Tocbot \r\n> 中文网：[http://www.javascriptcn.com/post/37495](http://www.javascriptcn.com/post/37495 \"http://www.javascriptcn.com/post/37495\")\r\n> - 下载地址：[github.com/tscanlin/tocbot](http://github.com/tscanlin/tocbot \"github.com/tscanlin/tocbot\")\r\n\r\n# 八、二维码生成 qrcode.jis \r\n> - 菜鸟教程：[www.runoob.com/w3cnote/javascript-qrcodejs-library.html](http://www.runoob.com/w3cnote/javascript-qrcodejs-library.html \"www.runoob.com/w3cnote/javascript-qrcodejs-library.html\")\r\n> - 下载地址：[https://github.com/davidshimjs/qrcodejs](https://github.com/davidshimjs/qrcodejs \"https://github.com/davidshimjs/qrcodejs\")\r\n> - bootCDN&全版本下载地址：[https://www.bootcdn.cn/tocbot/](https://www.bootcdn.cn/tocbot/ \"https://www.bootcdn.cn/tocbot/\")\r\n\r\n# 九、L2DLive看板娘\r\n**插件js引入：**\r\n```html\r\n<script src=\"https://eqcn.ajz.miesnfu.com/wp-content/plugins/wp-3d-pony/live2dw/lib/L2Dwidget.min.js\"></script>\r\n```\r\n**初始化js代码：**\r\n```javascript\r\nL2Dwidget.init({\r\n    model: {\r\n        //jsonpath控制显示那个小萝莉模型，下面这个就是我觉得最可爱的小萝莉模型 //hijiki猫  //izumi小姐姐 //shizuku书桌 //koharu萝莉\r\n        jsonPath: \"https://unpkg.com/live2d-widget-model-koharu@1.0.5/assets/koharu.model.json\", //这里改模型，前面后面都要改\r\n        scale: 1,\r\n    },\r\n    display: {\r\n        position: \"left\", //设置看板娘的上下左右位置\r\n        width: 120,  //小萝莉的宽度\r\n        height: 200, //小萝莉的高度\r\n        hOffset: 0,  //水平偏移\r\n        vOffset: 0  //垂直偏移\r\n    },\r\n    mobile: {\r\n        show: true,  //在移动端显示\r\n        scale: 0.4    //移动设备上的缩放\r\n    },\r\n    react: {\r\n        opacityDefault: 1, //设置透明度\r\n        opacityOnHover: 0.2\r\n    },\r\n});\r\nsetTimeout(function () {\r\n    $(\"#l2d-clear\").show();\r\n},3000)\r\n```\r\n\r\n','2021-03-31 07:26:24.653000','https://unsplash.it/800/450?image=1023','原创',0x01,0x01,0x01,'本站所使用到的前端插件','2021-07-08 05:48:57.010000',125,35,1),(50,0x01,0x01,'# JavaSE(java基础)\r\n1. 计算机基础\r\n2. java入门学习\r\n3. java基础语法\r\n4. 流程控制和方法\r\n5. 数组\r\n6. 面向对象编程\r\n7. 异常\r\n8. 常用类\r\n9. 集合框架\r\n10. IO\r\n11. 多线程\r\n12. GUI编程\r\n13. 网络编程\r\n14. 注解和反射\r\n15. JUC编程\r\n16. JVM探究\r\n17. 23种设计模式\r\n18. 数据结构和算法\r\n19. 正则表达式\r\n\r\n# JavaWeb(迈向网络编程的第一步)\r\n1. MySQL初级\r\n2. JDBC\r\n3. HTML5\r\n4. CSS3\r\n5. javaScript\r\n6. JQuery\r\n7. Layui & BootStrap\r\n8. Http协议\r\n9. Tomcat\r\n10. Servlet\r\n11. Cookie & Session\r\n12. JSP\r\n13. JSTL & EL表达式\r\n14. MVC三层架构\r\n15. 过滤器\r\n16. 监听器\r\n17. 文件上传下载\r\n18. 邮件收发\r\n19. 富文本编辑器\r\n\r\n# SSM框架(具备企业级开发的基本)\r\n1. Maven\r\n2. Junit\r\n3. Log4j\r\n4. MyBatis\r\n5. Spring\r\n6. SpringMVC\r\n7. JSON\r\n8. Ajax\r\n9. SSM框架整合\r\n10. Shiro（强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理）\r\n11. Soir\r\n12. Git\r\n13. MyBatis-Plus\r\n14. MySQL高级\r\n15. Netty\r\n16. MyCat\r\n\r\n# Linux运维(大部分项目运行环境，必学！)\r\n1. Linux基础\r\n2. Shell编程\r\n3. Linux系统管理\r\n4. Linux网络\r\n5. LAMP平台部署\r\n6. LNMP平台部署\r\n7. Nginx\r\n8. ELK日志分析\r\n9. MySQL集群\r\n10. Redis （缓存）\r\n11. Linux集群\r\n12. Docker （容器引擎）\r\n13. OpenStack\r\n14. Kubernetes\r\n\r\n# 微服务和分布式\r\n1. Vue\r\n2. NodeJS\r\n3. SpringBoot原理\r\n4. SpringBootWeb开发\r\n5. SpringDate\r\n6. SpringSecurity\r\n7. SpringBoot分布式开发\r\n8. ActiveMQ （消息中间件）\r\n9. ElasticSearch （搜索引擎）\r\n10. Dobbo + Zookeeper\r\n11. SpringCloud Netflix全家桶\r\n12. SpringCloud Alibaba全家桶\r\n\r\n# 大数据开发\r\n1. 负载均衡\r\n2. Hadoop\r\n3. Hive\r\n4. HBase\r\n5. Flume\r\n6. Sqoop\r\n7. Zookeeper\r\n8. Impala\r\n9. Scala编程\r\n10. Spark系列\r\n11. Kafka、rabbtMQ、Rockeet（消息队列）','2021-05-18 08:14:33.960000','https://unsplash.it/800/450?image=175','原创',0x01,0x01,0x01,'Java学习路线归总','2021-05-18 08:14:33.960000',186,40,1),(51,0x01,0x01,'# 三种elasticsearch\r\n## 1、spring-data-elasticsearch ：\r\n### Maven依赖：\r\n```xml\r\n<!-- spring-data-elasticsearch核心依赖 -->\r\n<dependency>\r\n    <groupId>org.springframework.data</groupId>\r\n    <artifactId>spring-data-elasticsearch</artifactId>\r\n    <version>4.1.1</version>\r\n</dependency>\r\n```\r\n### springdata 操作ES的CRUD代码：\r\n```java\r\npublic interface BookRepository extends ElasticsearchRepository<Book, String> {\r\n\r\n    /*\r\n    在Spring Data reppository支持直接按名字解析，但是起的方法名要按照一定的规则来取，解析的时候会\r\n    剥离以下的套词，然后对剩下的部分进行解析，查询的套词如下：find…By, read…By, query…By, count…By和get…By，\r\n    反正不管怎样，By后面就是实际查询条件的开始，一般都是基于实体的属性作条件，条件之间使用And或者Or来连接，比如\r\n    findBookByIdAndName, findBookByNameOrAuth\r\n     */\r\n    Book findByName(String name);\r\n\r\n    List<Book> findByAuthor(String author);\r\n\r\n    Book findBookById(String id);\r\n}\r\n```\r\n------------\r\n## 2、elasticsearch-rest-client：\r\n### maven依赖：\r\n```xml\r\n<!-- elasticsearch-rest-client核心依赖 -->\r\n<dependency>\r\n    <groupId>org.elasticsearch.client</groupId>\r\n    <artifactId>elasticsearch-rest-client</artifactId>\r\n    <version>7.10.0</version>\r\n</dependency>\r\n```\r\n### java 低级rest客户端操作ES的CRUD代码：\r\n```java\r\n@Service\r\npublic class EsServiceImpl implements EsService {\r\n\r\n    private Logger logger = LoggerFactory.getLogger(EsServiceImpl.class);\r\n\r\n    @Resource\r\n    private RestClient client;\r\n\r\n    @Override\r\n    public Book edit(Book book) throws IOException {\r\n        // 构造HTTP请求，第一个参数是请求方法，第二个参数是服务器的端点，host默认是http://localhost:9200，\r\n        // endpoint直接指定为index/type的形式\r\n        Request request = new Request(HttpMethod.POST.name(), new StringBuilder(\"/book/_doc/\").\r\n                append(book.getId()).toString());\r\n        // 设置其他一些参数比如美化json\r\n        request.addParameter(\"pretty\", \"true\");\r\n\r\n        // 设置请求体并指定ContentType，如果不指定默认为TEXT_PLAIN,\r\n        //设置ContentType.APPLICATION_JSON，UTF-8格式，中文不会乱码\r\n        request.setEntity(new NStringEntity(JSON.toJSONString(book), ContentType.APPLICATION_JSON));\r\n\r\n        // 发送HTTP请求\r\n        Response response = client.performRequest(request);\r\n\r\n        // 获取响应体, id: AWXvzZYWXWr3RnGSLyhH\r\n        String responseBody = EntityUtils.toString(response.getEntity());\r\n        logger.info(responseBody);\r\n        return book;\r\n    }\r\n\r\n    @Override\r\n    public boolean delById(String id) throws IOException {\r\n        Request request = new Request(HttpMethod.DELETE.name(),\r\n                new StringBuilder(\"/book/_doc/\").append(id).toString());\r\n        Response response = client.performRequest(request);\r\n        String responseBody = EntityUtils.toString(response.getEntity());\r\n        logger.info(responseBody);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public Book getById(String id) throws IOException {\r\n        Request request = new Request(HttpMethod.GET.name(),\r\n                new StringBuilder(\"/book/_doc/\").append(id).toString());\r\n        Response response = client.performRequest(request);\r\n        String responseBody = EntityUtils.toString(response.getEntity());\r\n        logger.info(responseBody);\r\n        return EsUtil.pass(responseBody, Book.class);\r\n    }\r\n\r\n    @Override\r\n    public boolean update(String id, Book book) throws IOException {\r\n        // 构造HTTP请求\r\n        Request request = new Request(\"POST\", new StringBuilder(\"/book/_doc/\").\r\n                append(id).append(\"/_update\").toString());\r\n\r\n        // 将数据丢进去，这里一定要外包一层“doc”，否则内部不能识别\r\n        JSONObject jsonObject = new JSONObject();\r\n        jsonObject.put(\"doc\", book);\r\n        request.setEntity(new NStringEntity(jsonObject.toString(), ContentType.APPLICATION_JSON));\r\n\r\n        // 执行HTTP请求\r\n        Response response = client.performRequest(request);\r\n\r\n        // 获取返回的内容\r\n        String responseBody = EntityUtils.toString(response.getEntity());\r\n        logger.info(responseBody);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean updateDescByScript(String id, String desc) throws IOException {\r\n        // 构造HTTP请求\r\n        Request request = new Request(\"POST\", new StringBuilder(\"/book/_doc/\").\r\n                append(id).append(\"/_update\").toString());\r\n\r\n        JSONObject jsonObject = new JSONObject();\r\n        // 创建脚本语言，如果是字符变量，必须加单引号\r\n        StringBuilder op1 = new StringBuilder(\"ctx._source.desc=\").append(\"\'\" + desc + \"\'\");\r\n        jsonObject.put(\"script\", op1);\r\n\r\n        request.setEntity(new NStringEntity(jsonObject.toString(), ContentType.APPLICATION_JSON));\r\n\r\n        // 执行HTTP请求\r\n        Response response = client.performRequest(request);\r\n\r\n        // 获取返回的内容\r\n        String responseBody = EntityUtils.toString(response.getEntity());\r\n        logger.info(responseBody);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public List<Book> queryByName(String name) throws IOException {\r\n        Request request = new Request(\"POST\", new StringBuilder(\"/book/_doc/_search\").toString());\r\n\r\n        JSONObject query = new JSONObject();\r\n        JSONObject match = new JSONObject();\r\n        JSONObject termName = new JSONObject();\r\n        termName.put(\"name\", name);\r\n        match.put(\"match\", termName);\r\n        query.put(\"query\", match);\r\n\r\n        logger.info(JSON.toJSONString(query));\r\n\r\n        request.setEntity(new NStringEntity(JSON.toJSONString(query), ContentType.APPLICATION_JSON));\r\n\r\n        // 执行HTTP请求\r\n        Response response = client.performRequest(request);\r\n\r\n        // 获取返回的内容\r\n        String responseBody = EntityUtils.toString(response.getEntity());\r\n        logger.info(responseBody);\r\n\r\n        return null;\r\n    }\r\n}\r\n```\r\n\r\n------------\r\n## 3、elasticsearch-rest-high-level-client\r\n### maven依赖：\r\n```xml\r\n<dependency>\r\n    <groupId>org.elasticsearch.client</groupId>\r\n    <artifactId>elasticsearch-rest-high-level-client</artifactId>\r\n    <version>7.10.0</version>\r\n</dependency>\r\n```\r\n### java 高级客户端操作ES的CRUD代码：\r\n个人感觉封装得有点复杂，还是需要非常熟悉ES的rest 低级接口才能容易理解并用高级客户端实现逻辑CRUD。\r\n```java\r\n@Service\r\npublic class EsServiceImpl implements EsService {\r\n\r\n    @Resource\r\n    private RestHighLevelClient client;\r\n\r\n    private static final String INDEX_CITY = \"city\";\r\n\r\n    private static final String TYPE = \"_doc\";\r\n\r\n    @Override\r\n    public City add(City city) throws IOException {\r\n        client.index(new IndexRequest(INDEX_CITY).id(String.valueOf(city.getId())).source(JSON.toJSONString(city), XContentType.JSON), RequestOptions.DEFAULT);\r\n        return city;\r\n    }\r\n\r\n    @Override\r\n    public City update(City city) throws IOException {\r\n        client.update(new UpdateRequest(INDEX_CITY, String.valueOf(city.getId())).doc(new IndexRequest(INDEX_CITY).id(String.valueOf(city.getId())).source(JSON.toJSONString(city), XContentType.JSON)), RequestOptions.DEFAULT);\r\n        return city;\r\n    }\r\n\r\n    @Override\r\n    public boolean delById(Integer id) throws IOException {\r\n        client.delete(new DeleteRequest(INDEX_CITY).id(String.valueOf(id)), RequestOptions.DEFAULT);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public City getById(Integer id) throws IOException {\r\n        GetResponse response = client.get(new GetRequest(INDEX_CITY, String.valueOf(id)), RequestOptions.DEFAULT);\r\n        return JSON.parseObject(response.getSourceAsString(), City.class);\r\n    }\r\n\r\n    @Override\r\n    public List<City> queryByName(String name) throws IOException {\r\n        SearchRequest request = new SearchRequest();\r\n        request.scroll(new TimeValue(1, TimeUnit.HOURS)); //滚动游标保留多久\r\n        request.setBatchedReduceSize(10);//每批次拉多少条\r\n        request.indices(INDEX_CITY);\r\n\r\n        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\r\n        //BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery().must(QueryBuilders.prefixQuery(\"name\", name));\r\n        PrefixQueryBuilder prefixQueryBuilder = QueryBuilders.prefixQuery(\"name\", name);\r\n        sourceBuilder.query(prefixQueryBuilder);\r\n        sourceBuilder.timeout(TimeValue.timeValueMinutes(2L));\r\n        //sourceBuilder.size(10);//分页量\r\n        //sourceBuilder.sort(\"name\", SortOrder.DESC);//排序\r\n\r\n        request.source(sourceBuilder);\r\n        SearchResponse response = client.search(request, RequestOptions.DEFAULT);\r\n        return Arrays.asList(response.getHits().getHits()).stream().map(obj -> JSON.parseObject(obj.getSourceAsString(), City.class)).collect(Collectors.toList());\r\n    }\r\n}\r\n```\r\n<br>\r\n\r\n------------\r\n# Springboot集成ElasticSearch\r\n### 1、maven依赖：\r\n```xml\r\n<!-- 导入es相关包 -->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-elasticsearch</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.elasticsearch.plugin</groupId>\r\n    <artifactId>transport-netty3-client</artifactId>\r\n<version>5.6.10</version>\r\n```\r\n### 2、配置\r\n```yaml\r\nspring:\r\n  data:\r\n    elasticsearch:\r\n      cluster-name: my-cluster\r\n      cluster-nodes: localhost:9300\r\n```\r\n### 3、编写配置类（主要是获取RestHighLevelClient）\r\n```java\r\n/**\r\n * 1、导入依赖\r\n * 2、编写配置,给容器中注入RestHighLevelClient对象\r\n * 3、操作Es\r\n */\r\n@Configuration\r\npublic class GulimallElasticSearchConfig {\r\n\r\n    public static final RequestOptions COMMON_OPTIONS;\r\n\r\n    static {\r\n        RequestOptions.Builder builder = RequestOptions.DEFAULT.toBuilder();\r\n//        builder.addHeader(\"Authorization\",\"Bearer\" + TOKEN);\r\n//        builder.setHttpAsyncResponseConsumerFactory(\r\n//                new HttpAsyncResponseConsumerFactory.\r\n//                        HeapBufferedResponseConsumerFactory(30 * 1024 * 1024 * 1024)\r\n//        );\r\n        COMMON_OPTIONS = builder.build();\r\n    }\r\n\r\n    @Bean\r\n    public RestHighLevelClient esRestClient() {\r\n\r\n        RestClientBuilder builder = null;\r\n\r\n        builder = RestClient.builder(new HttpHost(\"192.168.37.129\", 9200, \"http\"));\r\n\r\n        RestHighLevelClient restHighLevelClient = new RestHighLevelClient(builder);\r\n        return restHighLevelClient;\r\n    }\r\n\r\n}\r\n```\r\n### 4、测试\r\n```java\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest\r\nclass GulimallSearchApplicationTests {\r\n    \r\n    @Resource\r\n    RestHighLevelClient restHighLevelClient;\r\n\r\n	//向对应的index中写入数据\r\n    @Test\r\n    public void indexData() throws IOException {\r\n        //初始化请求，构造函数中指定index名\r\n        IndexRequest indexRequest = new IndexRequest(\"users\");\r\n        //设置id\r\n        indexRequest.id(\"2\");\r\n/*        indexRequest.source(\"userName\", \"zhangsan\");\r\n        indexRequest.source(\"age\", 18);*/\r\n        User user = new User(\"zhangsan\", \"male\", 18);\r\n        String jsonString = JSON.toJSONString(user);\r\n        //要保存的内容\r\n        indexRequest.source(jsonString, XContentType.JSON);\r\n        //执行操作\r\n        IndexResponse index = restHighLevelClient.index(indexRequest, GulimallElasticSearchConfig.COMMON_OPTIONS);\r\n\r\n        //提取有用的响应数据\r\n        System.out.println(index);\r\n    }\r\n\r\n    @NoArgsConstructor\r\n    @AllArgsConstructor\r\n    @Data\r\n    class User{\r\n        private String userName;\r\n        private String gender;\r\n        private Integer age;\r\n    }\r\n\r\n    @Test\r\n    void contextLoads() {\r\n        System.out.println(restHighLevelClient);\r\n    }\r\n}\r\n```\r\n','2021-05-18 08:32:12.134000','https://unsplash.it/800/450?image=180','原创',0x01,0x01,0x01,'ElasticSearch依赖及配置','2021-05-18 08:34:26.412000',113,4,1),(52,0x01,0x01,'> **记住三大类：**<br>\r\nWebSecurityConfigurerAdapter：（自定义Security策略，需要继承此类）<br>\r\nAuthenticationManagerBuilder：（自定义认证策略）<br>\r\n@EnableWebSecurity：（开启WebSecurity模式）\r\n\r\n## Security的Maven依赖：\r\n```xml\r\n<!--security安全-->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n</dependency>\r\n<!-- 阿里json框架 -->\r\n<dependency>\r\n    <groupId>com.alibaba</groupId>\r\n    <artifactId>fastjson</artifactId>\r\n    <version>1.2.58</version>\r\n</dependency>\r\n```\r\n## 密码加密工具类：\r\n```java\r\npackage com.qhj.utils;\r\n\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.util.DigestUtils;\r\nimport java.io.UnsupportedEncodingException;\r\n\r\n/**\r\n * 自定义的密码加密方法，实现了PasswordEncoder接口\r\n */\r\n@Component\r\npublic class MyPasswordEncoder implements PasswordEncoder {\r\n\r\n    @Override\r\n    public String encode(CharSequence charSequence) {\r\n        try {\r\n            // MD5加密密码\r\n            return DigestUtils.md5DigestAsHex(charSequence.toString().getBytes(\"UTF-8\"));\r\n        } catch (UnsupportedEncodingException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean matches(CharSequence charSequence, String s) {\r\n        return encode(charSequence).equals(s);\r\n    }\r\n}\r\n```\r\n## 自定义安全认证类：\r\n```java\r\npackage com.qhj.core;\r\n\r\nimport com.qhj.pojo.User;\r\nimport com.qhj.service.UserService;\r\nimport com.qhj.utils.MyPasswordEncoder;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.authentication.*;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.core.AuthenticationException;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class LoginValidateAuthenticationProvider implements AuthenticationProvider {\r\n\r\n    @Autowired\r\n    private UserService userService;\r\n    @Autowired\r\n    private MyPasswordEncoder myPasswordEncoder;\r\n\r\n    @Override\r\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\r\n        //获取输入的用户名\r\n        String username = authentication.getName();\r\n        //获取输入的明文\r\n        String rawPassword = (String) authentication.getCredentials();\r\n\r\n        //查询用户是否存在\r\n        User user = (User) userService.loadUserByUsername(username);\r\n\r\n        if (!user.isEnabled()) {\r\n            throw new DisabledException(\"该账户已被禁用，请联系管理员\");\r\n\r\n        } else if (!user.isAccountNonLocked()) {\r\n            throw new LockedException(\"该账号已被锁定\");\r\n\r\n        } else if (!user.isAccountNonExpired()) {\r\n            throw new AccountExpiredException(\"该账号已过期，请联系管理员\");\r\n\r\n        } else if (!user.isCredentialsNonExpired()) {\r\n            throw new CredentialsExpiredException(\"该账户的登录凭证已过期，请重新登录\");\r\n        }\r\n\r\n        // 验证是否管理员\r\n        if( !user.isAdmin()) {\r\n            throw  new BadCredentialsException(\"该账户没有管理权限！\");\r\n        }\r\n\r\n        //验证密码\r\n        if (!myPasswordEncoder.matches(rawPassword, user.getPassword())) {\r\n            throw new BadCredentialsException(\"输入密码错误!\");\r\n        }\r\n\r\n        // 构建返回的用户登录成功的token\r\n        return new UsernamePasswordAuthenticationToken(user, rawPassword, user.getAuthorities());\r\n    }\r\n\r\n    @Override\r\n    public boolean supports(Class<?> authentication) {\r\n        //确保authentication能转成该类\r\n        return authentication.equals(UsernamePasswordAuthenticationToken.class);\r\n    }\r\n}\r\n```\r\n## 登录成功处理器类：\r\n```java\r\npackage com.qhj.core.handler;\r\n\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n/**\r\n * 登陆成功处理handler\r\n */\r\n@Component\r\npublic class LoginSuccessHandler extends SavedRequestAwareAuthenticationSuccessHandler {\r\n\r\n    @Override\r\n    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws ServletException, IOException {\r\n        //登录成功返回\r\n        Map<String, Object> paramMap = new HashMap<>();\r\n        paramMap.put(\"code\", \"200\");\r\n        paramMap.put(\"message\", \"登录成功!\");\r\n        //设置返回请求头\r\n        response.setContentType(\"application/json;charset=utf-8\");\r\n        //写出流\r\n        PrintWriter out = response.getWriter();\r\n        out.write(JSONObject.toJSONString(paramMap));\r\n        out.flush();\r\n        out.close();\r\n    }\r\n}\r\n```\r\n## 登录失败处理器类：\r\n```java\r\npackage com.qhj.core.handler;\r\n\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport org.springframework.security.core.AuthenticationException;\r\nimport org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n/**\r\n *  登陆失败处理handler\r\n **/\r\n@Component\r\npublic class LoginFailureHandler extends SimpleUrlAuthenticationFailureHandler {\r\n\r\n    @Override\r\n    public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException, ServletException {\r\n        //登录失败信息返回\r\n        Map<String, Object> paramMap = new HashMap<>();\r\n        paramMap.put(\"code\", \"500\");\r\n        paramMap.put(\"message\", exception.getMessage());\r\n        //设置返回请求头\r\n        response.setContentType(\"application/json;charset=utf-8\");\r\n        //写出流\r\n        PrintWriter out = response.getWriter();\r\n        out.write(JSONObject.toJSONString(paramMap));\r\n        out.flush();\r\n        out.close();\r\n    }\r\n}\r\n```\r\n## SecurityConfig配置类：\r\n```java\r\npackage com.qhj.config;\r\n\r\nimport com.qhj.core.LoginValidateAuthenticationProvider;\r\nimport com.qhj.core.handler.LoginFailureHandler;\r\nimport com.qhj.core.handler.LoginSuccessHandler;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\r\nimport org.springframework.security.web.csrf.CsrfFilter;\r\nimport org.springframework.web.filter.CharacterEncodingFilter;\r\n\r\nimport javax.annotation.Resource;\r\n\r\n// 安全配置类\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    //自定义认证\r\n    @Resource\r\n    private LoginValidateAuthenticationProvider loginValidateAuthenticationProvider;\r\n\r\n    //登录成功handler\r\n    @Resource\r\n    private LoginSuccessHandler loginSuccessHandler;\r\n\r\n    //登录失败handler\r\n    @Resource\r\n    private LoginFailureHandler loginFailureHandler;\r\n\r\n    /**\r\n     * 权限核心配置\r\n     * @param http\r\n     * @throws Exception\r\n     */\r\n    // 授权\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.csrf().disable(); //取消csrf防护\r\n        //基础设置\r\n        http.httpBasic()//配置HTTP基本身份验证\r\n                .and()\r\n                .authorizeRequests().antMatchers(\"/css/**\",\"/js/**\",\"/fonts/**\",\"/img/**\",\"/lib/**\").permitAll() //静态资源不被拦截\r\n                .and()\r\n                .authorizeRequests().antMatchers(\"/admin/login/**\").permitAll()  //用户登录注册页面不被拦截\r\n                .and()\r\n                .authorizeRequests().antMatchers(\"/admin/**\").authenticated()\r\n//                .authorizeRequests().anyRequest().authenticated()   //其余页面都需要认证（只有登录后才可以正常访问\r\n                .and()\r\n                .formLogin() //登录表单\r\n                .loginPage(\"/admin/login\")//登录页面url\r\n                .loginProcessingUrl(\"/admin/login\")//登录验证url\r\n                .defaultSuccessUrl(\"/admin/index\")//成功登录跳转\r\n                .successHandler(loginSuccessHandler)//成功登录处理器\r\n                .failureHandler(loginFailureHandler)//失败登录处理器\r\n                .permitAll()//登录成功后有权限访问所有页面\r\n                .and()\r\n                .logout() //开启注销功能\r\n                .logoutUrl(\"/logout\") //注销路径\r\n                .logoutSuccessUrl(\"/admin/login\")\r\n                .deleteCookies(\"JSESSIONID\") //清除cookie\r\n                .invalidateHttpSession(true) //使session失效\r\n                .permitAll();\r\n\r\n        //单用户登录，如果有一个登录了，同一个用户在其他地方登录将前一个剔除下线\r\n        //http.sessionManagement().maximumSessions(1).expiredSessionStrategy(expiredSessionStrategy());\r\n        //单用户登录，如果有一个登录了，同一个用户在其他地方不能登录\r\n        http.sessionManagement().maximumSessions(1).maxSessionsPreventsLogin(true);\r\n\r\n        //解决中文乱码问题\r\n        CharacterEncodingFilter filter = new CharacterEncodingFilter();\r\n        filter.setEncoding(\"UTF-8\"); filter.setForceEncoding(true);\r\n        http.addFilterBefore(filter, CsrfFilter.class);\r\n    }\r\n\r\n    // 认证\r\n    @Override\r\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\r\n        //设置自定义认证\r\n        auth.authenticationProvider(loginValidateAuthenticationProvider);\r\n    }\r\n}\r\n```','2021-05-18 09:03:34.820000','https://unsplash.it/800/450?image=180','原创',0x01,0x01,0x01,'Spring Security依赖及核心代码','2021-05-18 09:09:39.213000',149,4,1);
/*!40000 ALTER TABLE `t_blog` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_blog_tags`
--

DROP TABLE IF EXISTS `t_blog_tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_blog_tags` (
  `blogs_id` bigint(20) NOT NULL,
  `tags_id` bigint(20) NOT NULL,
  KEY `FK5feau0gb4lq47fdb03uboswm8` (`tags_id`) USING BTREE,
  KEY `FKh4pacwjwofrugxa9hpwaxg6mr` (`blogs_id`) USING BTREE,
  CONSTRAINT `FK5feau0gb4lq47fdb03uboswm8` FOREIGN KEY (`tags_id`) REFERENCES `t_tag` (`id`),
  CONSTRAINT `FKh4pacwjwofrugxa9hpwaxg6mr` FOREIGN KEY (`blogs_id`) REFERENCES `t_blog` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_blog_tags`
--

LOCK TABLES `t_blog_tags` WRITE;
/*!40000 ALTER TABLE `t_blog_tags` DISABLE KEYS */;
INSERT INTO `t_blog_tags` VALUES (21,13),(21,17),(21,18),(23,12),(23,15),(42,41),(45,12),(45,15),(45,44),(22,11),(22,12),(50,12),(51,12),(51,15),(52,12),(52,15),(52,53),(46,13),(46,14),(46,18);
/*!40000 ALTER TABLE `t_blog_tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_comment`
--

DROP TABLE IF EXISTS `t_comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_comment` (
  `id` bigint(20) NOT NULL,
  `avatar` varchar(255) DEFAULT NULL,
  `content` varchar(255) DEFAULT NULL,
  `create_time` datetime(6) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `nickname` varchar(255) DEFAULT NULL,
  `blog_id` bigint(20) DEFAULT NULL,
  `parent_comment_id` bigint(20) DEFAULT NULL,
  `admin_comment` bit(1) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `FKke3uogd04j4jx316m1p51e05u` (`blog_id`) USING BTREE,
  KEY `FK4jj284r3pb7japogvo6h72q95` (`parent_comment_id`) USING BTREE,
  CONSTRAINT `FK4jj284r3pb7japogvo6h72q95` FOREIGN KEY (`parent_comment_id`) REFERENCES `t_comment` (`id`),
  CONSTRAINT `FKke3uogd04j4jx316m1p51e05u` FOREIGN KEY (`blog_id`) REFERENCES `t_blog` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_comment`
--

LOCK TABLES `t_comment` WRITE;
/*!40000 ALTER TABLE `t_comment` DISABLE KEYS */;
INSERT INTO `t_comment` VALUES (26,'/img/avatar01.jpg','hi 有人吗？','2021-03-27 13:20:27.956000','123424@qq.com','小白',22,NULL,0x00),(27,'/img/avatar03.jpg','小白好！','2021-03-27 13:23:04.459000','123@163.com','小明',22,26,0x00),(28,'/img/avatar02.jpg','小红来啦！','2021-03-27 14:51:19.167000','123@163.com','小红',22,NULL,0x00),(29,'/img/avatar01.jpg','小明的好！','2021-03-27 14:52:07.866000','123@163.com','小白',22,27,0x00),(33,'/img/head_avatar.jpg','hello!','2021-03-27 16:41:53.309000','qinhongjie163@163.com','秦洪杰',22,NULL,0x01),(34,'/img/head_avatar.jpg','小红 欢迎欢迎！','2021-03-27 16:42:26.369000','qinhongjie163@163.com','秦洪杰',22,28,0x01),(37,'/img/avatar02.jpg','quh','2021-03-28 12:41:58.992000','123@qq.com','ss',22,NULL,0x00),(38,'/img/head_avatar_m.jpg','技术分享啦','2021-03-28 13:03:21.515000','qinhongjie163@163.com','秦洪杰',21,NULL,0x01),(43,'/img/head_avatar_m.jpg','Linux笔记分享','2021-03-28 17:31:10.492000','qinhongjie163@163.com','秦洪杰',42,NULL,0x01),(47,'/img/head_avatar_m.jpg','本文记录共享了本站前端功能实现的一些插件资源！','2021-03-31 07:59:07.407000','qinhongjie163@163.com','秦洪杰',46,NULL,0x01),(48,'/img/avatar02.jpg','我是小廖','2021-04-02 06:23:17.198000','1690364461@qq.com','廖',22,NULL,0x00),(49,'/img/head_avatar_m.jpg','欢迎欢迎！','2021-04-02 06:58:37.977000','qinhongjie163@163.com','秦洪杰',22,48,0x01),(54,'/img/head_avatar_m.jpg','借鉴网上大佬和自己添加整理出来的学习路线，自己也会跟着这条线走，并且在整理的过程中也发现了以前忽略的东西，如果有更好的技术或者我漏掉的希望在评论区分享出来！','2021-05-29 03:12:32.921000','qinhongjie163@163.com','秦洪杰',50,NULL,0x01),(55,'/img/avatar02.jpg','加油 ','2021-05-29 15:31:36.133000','694423538@qq.com','brook',50,NULL,0x00),(56,'/img/head_avatar_m.jpg','会的 哈哈哈','2021-05-29 15:35:11.685000','qinhongjie163@163.com','秦洪杰',50,55,0x01),(57,'/img/avatar02.jpg','好棒，收藏了！','2021-07-09 06:11:31.369000','123@123','游客人',52,NULL,0x00);
/*!40000 ALTER TABLE `t_comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_tag`
--

DROP TABLE IF EXISTS `t_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_tag` (
  `id` bigint(20) NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_tag`
--

LOCK TABLES `t_tag` WRITE;
/*!40000 ALTER TABLE `t_tag` DISABLE KEYS */;
INSERT INTO `t_tag` VALUES (11,'JavaWeb'),(12,'Java'),(13,'JavaScript'),(14,'Web'),(15,'Spring Boot'),(16,'Spring data jpa'),(17,'Ajax'),(18,'JQuery'),(19,'MySQL'),(25,'Mybatis'),(39,'生活'),(41,'Linux'),(44,'api'),(53,'Spring Security');
/*!40000 ALTER TABLE `t_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_type`
--

DROP TABLE IF EXISTS `t_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_type` (
  `id` bigint(20) NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_type`
--

LOCK TABLES `t_type` WRITE;
/*!40000 ALTER TABLE `t_type` DISABLE KEYS */;
INSERT INTO `t_type` VALUES (2,'点滴生活'),(4,'学习日志'),(6,'数据库'),(7,'前端技术'),(35,'关于本站'),(40,'勿忘笔记');
/*!40000 ALTER TABLE `t_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_user`
--

DROP TABLE IF EXISTS `t_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_user` (
  `id` bigint(20) NOT NULL,
  `avatar` varchar(255) DEFAULT NULL,
  `create_time` datetime(6) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `nickname` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  `type` int(11) DEFAULT NULL,
  `update_time` datetime(6) DEFAULT NULL,
  `username` varchar(255) DEFAULT NULL,
  `admin` bit(1) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_user`
--

LOCK TABLES `t_user` WRITE;
/*!40000 ALTER TABLE `t_user` DISABLE KEYS */;
INSERT INTO `t_user` VALUES (1,'/img/head_avatar_m.jpg','2021-03-25 18:03:36.000000','qinhongjie163@163.com','秦洪杰','2acb717b76e85cc44c07dbeeda6da829',1,'2021-03-25 18:04:23.000000','qinhongjie',0x01);
/*!40000 ALTER TABLE `t_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping events for database 'blog'
--

--
-- Dumping routines for database 'blog'
--
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2021-10-11  1:30:01
